//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitoringClient.Models.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventarisierungsloesungEntities : DbContext
    {
        public InventarisierungsloesungEntities()
            : base("name=InventarisierungsloesungEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accounting> Accountings { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Credential> Credentials { get; set; }
        public virtual DbSet<CustomerAccount> CustomerAccounts { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<Deviceport> Deviceports { get; set; }
        public virtual DbSet<Devicetype> Devicetypes { get; set; }
        public virtual DbSet<DevicetypeHasOperatingsystem> DevicetypeHasOperatingsystems { get; set; }
        public virtual DbSet<Interface> Interfaces { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<LogEntry> LogEntries { get; set; }
        public virtual DbSet<Network> Networks { get; set; }
        public virtual DbSet<Operatingsystem> Operatingsystems { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Pointofdelivery> Pointofdeliveries { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Productgroup> Productgroups { get; set; }
        public virtual DbSet<SoftwareService> SoftwareServices { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Town> Towns { get; set; }
        public virtual DbSet<Transportmedium> Transportmediums { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
    
        [DbFunction("InventarisierungsloesungEntities", "GetLocationsHirarchicalRecursive")]
        public virtual IQueryable<GetLocationsHirarchicalRecursive_Result> GetLocationsHirarchicalRecursive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLocationsHirarchicalRecursive_Result>("[InventarisierungsloesungEntities].[GetLocationsHirarchicalRecursive]()");
        }
    
        public virtual int LogClear(Nullable<long> logEntriesId)
        {
            var logEntriesIdParameter = logEntriesId.HasValue ?
                new ObjectParameter("LogEntriesId", logEntriesId) :
                new ObjectParameter("LogEntriesId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogClear", logEntriesIdParameter);
        }
    
        public virtual int LogMessageAdd(string i_pod, string i_hostname, Nullable<int> i_severity, string i_message)
        {
            var i_podParameter = i_pod != null ?
                new ObjectParameter("i_pod", i_pod) :
                new ObjectParameter("i_pod", typeof(string));
    
            var i_hostnameParameter = i_hostname != null ?
                new ObjectParameter("i_hostname", i_hostname) :
                new ObjectParameter("i_hostname", typeof(string));
    
            var i_severityParameter = i_severity.HasValue ?
                new ObjectParameter("i_severity", i_severity) :
                new ObjectParameter("i_severity", typeof(int));
    
            var i_messageParameter = i_message != null ?
                new ObjectParameter("i_message", i_message) :
                new ObjectParameter("i_message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogMessageAdd", i_podParameter, i_hostnameParameter, i_severityParameter, i_messageParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
